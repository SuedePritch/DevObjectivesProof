{
  "type": "module",
  "name": "devobjectivesproof",
  "version": "1.0.0",
  "description": "Installed   &#9745; React   &#9745; Redux   &#9745; Typescript   &#9745; Styled Componets   &#9745; Bootstrap/Reactstrap   &#9745; Axios   &#9745; Dotenv   &#9745; JWT   &#9745; Express   &#9745; Mongoose   &#9745; Voca   &#9745; Date-Fns   &#9745; AJV/JSON Schema   &#9745; Babel   &#9745; Webpack",
  "main": ".eslintrc.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SuedePritch/DevObjectivesProof.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/SuedePritch/DevObjectivesProof/issues"
  },
  "homepage": "https://github.com/SuedePritch/DevObjectivesProof#readme",
  "prettier": {
    "trailingComma": "es5",
    "semi": false,
    "useTabs": false,
    "singleQuote": true,
    "tabWidth": 2,
    "bracketSpacing": true,
    "printWidth": 100
  },
  "eslintConfig": {
    "root": true,
    "rules": {
      "camelcase": "off",
      "object-shorthand": 1
    },
    "parserOptions": {
      "sourceType": "module",
      "ecmaVersion": 2017
    },
    "extends": [
      "eslint:recommended"
    ],
    "settings": {
      "react": {
        "version": "detect"
      },
      "import/extensions": [
        ".js",
        ".jsx",
        ".ts",
        ".tsx"
      ]
    },
    "overrides": [
      {
        "files": [
          "*.js",
          "*.jsx"
        ],
        "parser": "babel-eslint",
        "env": {
          "node": true,
          "es2020": true,
          "browser": true
        },
        "rules": {
          "no-case-declarations": 0,
          "no-unused-vars": 0
        },
        "extends": [
          "eslint:recommended",
          "plugin:react/recommended",
          "plugin:import/recommended",
          "plugin:import/typescript"
        ]
      },
      {
        "files": [
          "*.ts",
          "*.tsx"
        ],
        "parser": "@typescript-eslint/parser",
        "parserOptions": {
          "project": "tsconfig.json"
        },
        "plugins": [
          "@typescript-eslint"
        ],
        "extends": [
          "eslint:recommended",
          "plugin:@typescript-eslint/eslint-recommended",
          "plugin:@typescript-eslint/recommended"
        ],
        "rules": {
          "no-case-declarations": 0,
          "@typescript-eslint/no-unused-vars": 0,
          "@typescript-eslint/no-explicit-any": 0,
          "@typescript-eslint/no-empty-interface": 0,
          "@typescript-eslint/explicit-module-boundary-types": 0,
          "@typescript-eslint/ban-types": [
            "error",
            {
              "extendDefaults": false,
              "types": {
                "String": {
                  "message": "Use string instead",
                  "fixWith": "string"
                },
                "Boolean": {
                  "message": "Use boolean instead",
                  "fixWith": "boolean"
                },
                "Number": {
                  "message": "Use number instead",
                  "fixWith": "number"
                },
                "Symbol": {
                  "message": "Use symbol instead",
                  "fixWith": "symbol"
                },
                "Object": {
                  "message": "The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead."
                },
                "{}": {
                  "message": "`{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead."
                },
                "object": {
                  "message": "The `object` type is currently hard to use ([see this issue](https://github.com/microsoft/TypeScript/issues/21732)).\nConsider using `Record<string, unknown>` instead, as it allows you to more easily inspect and use the keys."
                }
              }
            }
          ],
          "@typescript-eslint/naming-convention": [
            "error",
            {
              "selector": "default",
              "leadingUnderscore": "allow",
              "format": [
                "camelCase",
                "UPPER_CASE"
              ]
            },
            {
              "selector": "variable",
              "format": [
                "PascalCase",
                "camelCase",
                "UPPER_CASE"
              ]
            },
            {
              "selector": "parameter",
              "format": [
                "camelCase"
              ],
              "leadingUnderscore": "allow"
            },
            {
              "selector": "memberLike",
              "modifiers": [
                "private"
              ],
              "format": [
                "camelCase"
              ]
            },
            {
              "selector": "typeLike",
              "format": [
                "PascalCase"
              ]
            },
            {
              "selector": "function",
              "format": [
                "PascalCase",
                "camelCase",
                "UPPER_CASE"
              ]
            }
          ]
        }
      }
    ]
  },
  "eslintIgnore": [
    "node_modules",
    "**/build",
    "**/.aws-sam",
    "**/public"
  ],
  "huskyfuckoff": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": "eslint --cache --fix",
    "*.{js,css,md,ts,jsx,tsx}": "prettier --write"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.48.2",
    "@typescript-eslint/parser": "^5.48.2",
    "eslint": "^8.32.0",
    "eslint-plugin-react": "^7.32.1",
    "prettier": "^2.8.3"
  }
}
